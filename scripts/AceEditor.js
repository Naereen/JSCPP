"use strict";

var AceEditor = React.createClass({
  displayName: function displayName() {
    return "AceEditor";
  },
  getDefaultProps: function getDefaultProps() {
    return {
      name: "brace-editor",
      mode: "c_cpp",
      theme: "monokai",
      value: "",
      markers: [],
      fontSize: 12,
      showGutter: true,
      onChange: null,
      onLoad: null,
      maxLines: null,
      readOnly: false,
      highlightActiveLine: true,
      showPrintMargin: true
    };
  },
  markerIds: [],
  componentDidMount: function componentDidMount() {
    window.Range = ace.require("ace/range").Range;
    this.editor = ace.edit(this.props.name);
    this.editor.on("change", this.onChange);
    this.componentWillReceiveProps(this.props);

    if (this.props.onLoad) {
      return this.props.onLoad(this.editor);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var markers = nextProps.markers,
        name = nextProps.name,
        mode = nextProps.mode,
        theme = nextProps.theme,
        fontSize = nextProps.fontSize,
        maxLines = nextProps.maxLines,
        readOnly = nextProps.readOnly,
        highlightActiveLine = nextProps.highlightActiveLine,
        setShowPrintMargin = nextProps.setShowPrintMargin,
        value = nextProps.value,
        showGutter = nextProps.showGutter,
        onLoad = nextProps.onLoad;
    this.editor = ace.edit(name);
    this.editor.getSession().setMode("ace/mode/" + mode);
    this.editor.setTheme("ace/theme/" + theme);
    this.editor.setFontSize(fontSize);
    this.editor.setOption("maxLines", maxLines);
    this.editor.setOption("readOnly", readOnly);
    this.editor.setOption("highlightActiveLine", highlightActiveLine);
    this.editor.setOptions({
      showLineNumbers: true,
      enableBasicAutocompletion: true,
      enableSnippets: false,
      enableLiveAutocompletion: true
    });
    this.editor.setShowPrintMargin(setShowPrintMargin);

    for (var _i = 0, _Array$from = Array.from(this.markerIds); _i < _Array$from.length; _i++) {
      var markerid = _Array$from[_i];
      this.editor.getSession().removeMarker(markerid);
    }

    this.markerIds = [];

    for (var _i2 = 0, _Array$from2 = Array.from(markers); _i2 < _Array$from2.length; _i2++) {
      var marker = _Array$from2[_i2];
      this.markerIds.push(this.editor.getSession().addMarker(marker, "debug-highlight", "fullLine"));
    }

    if (this.editor.getValue() !== value) {
      this.editor.setValue(value, 1);
    }

    return this.editor.renderer.setShowGutter(showGutter);
  },
  onChange: function onChange() {
    var value = this.editor.getValue();

    if (this.props.onChange) {
      return this.props.onChange(value);
    }
  },
  render: function render() {
    var _this$props = this.props,
        name = _this$props.name,
        className = _this$props.className;
    return /*#__PURE__*/React.createElement("div", {
      id: name,
      className: className
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,